/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { UnitSystem, } from "./components/list-item-location/unit-system.enum";
import { RouteParams, } from "./components/map/route-params.interface";
import { NotificationPosition, } from "./components/notification/notification-position.enum";
import { NotificationMessage, } from "./components/notification/notification-message.interface";
import { NotificationType, } from "./components/notification/notification-type.enum";
export namespace Components {
    interface MiCard {
    }
    interface MiColumn {
        "binding": string;
        "label": string;
        "sortable": boolean;
    }
    interface MiDataTable {
        "columns": Array<any>;
        "maxRows": number;
        "rows": Array<any>;
    }
    interface MiDropdown {
        /**
          * This attribute indicates that the items can be filtered using the input field present at the top. If it is not specified, the input field will not be visible, and filtering is not possible.
          * @type {boolean}
          * @memberof Dropdown
         */
        "filterable": boolean;
        /**
          * Gets or sets the list items.
          * @type {Array<HTMLMiDropdownItemElement>}
          * @memberof Dropdown
         */
        "items": Array<HTMLMiDropdownItemElement>;
        /**
          * The label will be displayed in as the text of the dropdown if the attribute multiple is pressent. *Only required if multiple is pressent.
          * @type {string}
          * @memberof Dropdown
         */
        "label": string;
        /**
          * This attribute indicates that multiple items can be selected in the list. If it is not specified, then only one item can be selected at a time.
          * @type {boolean}
          * @memberof Dropdown
         */
        "multiple": boolean;
        /**
          * Gets or sets the state of the dropdown. If the attribute is set to true then the dropdown will be expanded.
          * @type {boolean}
          * @memberof Dropdown
         */
        "open": boolean;
        /**
          * Gets the selected items
          * @type {Array<HTMLMiDropdownItemElement>}
          * @memberof Dropdown
         */
        "selected": Array<HTMLMiDropdownItemElement>;
    }
    interface MiDropdownItem {
        "selected": boolean;
        "text": string;
        "value": string;
    }
    interface MiKeyboard {
        /**
          * The active input element.
          * @type {HTMLInputElement}
         */
        "inputElement": HTMLInputElement;
        /**
          * The keyboard layout to use. Defaults to alphabetic.
          * @type {KeyboardLayout}
         */
        "layout": string;
    }
    interface MiList {
        /**
          * @description Determines if the MI Scroll Buttons Component should be rendered.
          * @type {boolean}
         */
        "scrollButtonsEnabled": boolean;
        /**
          * @description Determines how far to scroll when clicking one of the buttons from the MI Scroll Buttons Component.
          * @type {number}
         */
        "scrollLength": number;
    }
    interface MiListItemCategory {
        /**
          * @description Array of Categories.
          * @type {Array<Category>}
         */
        "category": any;
        /**
          * @description List orientation. Accepts the following values: 'vertical' and 'horizontal'.
          * @type {string}
         */
        "orientation": string;
    }
    interface MiListItemLocation {
        /**
          * @description MI location.
         */
        "location": any;
        /**
          * @description Set imperial or metric as default unit system.
          * @type {UnitSystem}
         */
        "unit": UnitSystem;
    }
    interface MiLocationInfo {
        /**
          * @description MI location.
         */
        "location": any;
    }
    interface MiMap {
        /**
          * Remove locations filter, thus showing all locations.
          * @param fitView - Change the map viewport to fit all shown locations.
         */
        "clearLocationFilter": (fitView?: boolean) => Promise<void>;
        /**
          * Clear a currently rendered route (polyline).
         */
        "clearRoute": () => Promise<void>;
        /**
          * Close info window.
         */
        "closeInfoWindow": () => Promise<void>;
        /**
          * Set to true to prevent external links on the map from opening. This can be useful when running the map on a kiosk where you never want the browser to navigate away.
         */
        "disableExternalLinks": boolean;
        /**
          * Filter the locations on the map by showing only provided location IDs.
          * @param locationIds - The IDs of the locations to show. Any other locations will be hidden.
          * @param fitView - Change the map viewport to fit the shown locations.
         */
        "filterLocations": (locationIds: string[], fitView?: boolean) => Promise<void>;
        /**
          * Sets the map viewport to contain the given bounds.
          * @param bounds
         */
        "fitBounds": (bounds: any) => Promise<void>;
        /**
          * Changes the map view to show the default venue or pass in a venue ID to go to another venue.
          * @param venueId - Venue ID
         */
        "fitVenue": (venueId?: string) => Promise<void>;
        /**
          * Set or get the current floor shown on the map.
         */
        "floor": string;
        /**
          * If given, will render a floor selector as a Google Map Control. Pass a string corresponding to a Google Maps Control position: https://developers.google.com/maps/documentation/javascript/controls#ControlPositioning
         */
        "floorSelector": google.maps.ControlPosition;
        /**
          * Returns the lat/lng bounds of the current map viewport.
          * @returns
         */
        "getBounds": () => Promise<Object>;
        /**
          * Get the version of the MapsIndoors SDK.
          * @return SDK version
         */
        "getMapsIndoorsVersion": () => Promise<string>;
        /**
          * Get info about the current route.
          * @returns DirectionsResult
         */
        "getRoute": () => Promise<any>;
        /**
          * The Google Maps API key
         */
        "gmApiKey": string;
        /**
          * Google Maps options. Defaults to zoom: 17, maxZoom: 21, mapTypeControl: false, streetViewControl: false. https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions
          * @type {google.maps.MapOptions}
         */
        "gmOptions": google.maps.MapOptions;
        /**
          * The MapsIndoors API key
         */
        "miApiKey": string;
        /**
          * Renders the next leg of the set route as a polyline on the map.
         */
        "nextRouteLeg": () => Promise<void>;
        /**
          * Open info window.
          * @param content - Content of the info window in clear text or HTML.
          * @param anchor - The location of the info window
          * @param className - A classname given to the div holding the content
         */
        "openInfoWindow": (content: string, anchor: any, className?: string) => Promise<void>;
        /**
          * Changes the center of the map to the given LatLng.
          * @param latLng
         */
        "panTo": (latLng: any) => Promise<void>;
        /**
          * The stroke color of direction polyline on the map. Accepts any legal HTML color value. Default: '#307ad9'.
         */
        "polylineColor": string;
        /**
          * The stroke opacity of directions polylines on the map. Numerical value between 0.0 and 1.0. Default: 1.
         */
        "polylineOpacity": number;
        /**
          * The the width of the direction polyline in pixels. Default: 4.
         */
        "polylineWeight": number;
        "positionControl": google.maps.ControlPosition;
        /**
          * Renders the previous leg of the set route as a polyline on the map.
         */
        "previousRouteLeg": () => Promise<void>;
        /**
          * Set a display rule for one or more types or locations.
          * @param target - Can be a single location id or type name, or an array of locations ids and type names.
          * @param displayRule
         */
        "setDisplayRule": (target: string | string[], displayRule: object) => Promise<void>;
        /**
          * Sets a route, and renders the first leg of the route as a polyline.
          * @param directionsResult https://app.mapsindoors.com/mapsindoors/js/sdk/latest/docs/global.html#DirectionsResult
         */
        "setRoute": (directionsResult: any) => Promise<void>;
        /**
          * Sets the index which leg of the route to display on the map.
          * @param index Index of route leg to render on map.
         */
        "setRouteLegIndex": (index: number) => Promise<void>;
        /**
          * Sets the venue
          * @param venue venue id string or venue object to set
         */
        "setVenue": (venue: any) => Promise<void>;
        /**
          * Show a route on the map from one location to another
          * @param routeParams
         */
        "showRoute": (routeParams: RouteParams) => Promise<void>;
        /**
          * Set or get the current zoom level of the map.
         */
        "zoom": string;
    }
    interface MiMetricCard {
        /**
          * This can be used for displaying an error message if there are no data to be displayed.
          * @type {string}
          * @memberof MetricCard
         */
        "error": string;
        /**
          * This is the metric title.
          * @type {string}
          * @memberof MetricCard
         */
        "label": string;
        /**
          * When present a loading spinner will be displayed until the value or error attribute is set or the spinner attribute is removed
          * @type {boolean}
          * @memberof MetricCard
         */
        "spinner": boolean;
        /**
          * When present a info icon will be shown in the upper right corner of the card. When the mouse hovers over the icon tooltip will display the tip.
          * @type {string}
          * @memberof MetricCard
         */
        "tip": string;
        /**
          * This is the metric value.
          * @type {string}
          * @memberof MetricCard
         */
        "value": string;
    }
    interface MiNotification {
        /**
          * @description Clear all notifications.
          * @returns
         */
        "clearAll": () => Promise<void>;
        /**
          * @description Time the notification should be visible.
          * @type {number} - Duration in seconds.
         */
        "duration": number;
        /**
          * @description Where the notifications should be positioned.
          * @type {NotificationPosition}
         */
        "position": NotificationPosition;
        /**
          * @description Show a notification.
          * @param message - Message to display.
          * @param type - Type of notification. Available types: 'info', 'warning', 'success', 'error' and 'none'.
          * @param sticky - Set message as sticky to prevent it from disappearing.
          * @returns
         */
        "push": (message: string, type?: string, sticky?: boolean) => Promise<void>;
    }
    interface MiScrollButtons {
        /**
          * @description Reference to the element with scroll on parent element.
          * @type {HTMLDivElement}
         */
        "scrollContainerElementRef": HTMLDivElement;
        /**
          * @description Determines how far to scroll when clicking one of the buttons.
          * @type {number}
         */
        "scrollLength": number;
        /**
          * @description Updates enable/disable state for scroll up and down buttons.
          * @returns
          * @memberof ScrollButtons
         */
        "updateScrollButtonsState": () => Promise<void>;
    }
    interface MiSearch {
        /**
          * Clear the input field.
         */
        "clear": () => Promise<void>;
        /**
          * Data attributes for the input field.
         */
        "dataAttributes": {
            [key: string]: string;
        };
        /**
          * Restrict Google Places search to a specific country (two-character, ISO 3166-1 Alpha-2 compatible country code)
         */
        "gmCountryCode": string;
        /**
          * If searching should include Google Places autocomplete suggestions.  Remember to comply to Google's policy by showing a "Power By Google" badge somewhere on your page if not already showing a Google map: https://developers.google.com/places/web-service/policies
         */
        "google": boolean;
        /**
          * Id for the input field.
         */
        "idAttribute": string;
        /**
          * If searching should include MapsIndoors locations.
         */
        "mapsindoors": boolean;
        /**
          * Search only Mapsindoors locations within given categories. Accepts comma separated list of categories, eg. 'toilet,office'
         */
        "miCategories": string;
        /**
          * Which fields on MapsIndoors locations to search in. Comma separated string.
         */
        "miFields": string;
        /**
          * Search for MapsIndoors locations near a point. Can either be lat,lng coordinate as a string, eg. '-12.3456,45.6789' or a string in the format "type:id" e.g. "venue:586ca9f1bc1f5702406442b6"
         */
        "miNear": string;
        /**
          * Specify Mapsindoors search ordering
         */
        "miOrder": string;
        /**
          * Tell Mapsindoors to skip a number of results. Combine with miTake for pagination purposes.
         */
        "miSkip": number;
        /**
          * Restrict how many Mapsindoors results to request.
         */
        "miTake": number;
        /**
          * Placeholder for the input field.
         */
        "placeholder": string;
        /**
          * Get or set the entered value
         */
        "value": string;
    }
    interface MiShareSms {
        /**
          * Default value for country code input field.
          * @type {string}
         */
        "countryCode": string;
        /**
          * MapsIndoors id for destination location.
          * @type {string}
         */
        "destinationLocationId": string;
        /**
          * MapsIndoors id for origin location.
          * @type {string}
         */
        "originLocationId": string;
        /**
          * Placeholder text for phone number input field.
          * @type {string}
         */
        "phoneNumberInputPlaceholder": string;
        /**
          * Label for submit button.
          * @type {string}
         */
        "submitButtonLabel": string;
        /**
          * MapsIndoors venue id.
          * @type {string}
         */
        "venueId": string;
    }
    interface MiSpinner {
        /**
          * The inverse attribute will inverse the color of the spinner.
          * @type {boolean}
          * @memberof Spinner
         */
        "inverse": boolean;
    }
    interface MiStepSwitcher {
        /**
          * Heading to display.
          * @type {string}
         */
        "heading": string;
        /**
          * Step index to show. Defaults to first step.
          * @type {number}
         */
        "stepIndex": number;
        /**
          * Steps to display dots for.
          * @type {any[]}
         */
        "steps": any[];
    }
    interface MiTab {
        "label": string;
        "tabFor": string;
    }
    interface MiTabPanel {
        "active": (active?: boolean) => Promise<boolean>;
    }
    interface MiTabs {
        "active": number;
    }
}
declare global {
    interface HTMLMiCardElement extends Components.MiCard, HTMLStencilElement {
    }
    var HTMLMiCardElement: {
        prototype: HTMLMiCardElement;
        new (): HTMLMiCardElement;
    };
    interface HTMLMiColumnElement extends Components.MiColumn, HTMLStencilElement {
    }
    var HTMLMiColumnElement: {
        prototype: HTMLMiColumnElement;
        new (): HTMLMiColumnElement;
    };
    interface HTMLMiDataTableElement extends Components.MiDataTable, HTMLStencilElement {
    }
    var HTMLMiDataTableElement: {
        prototype: HTMLMiDataTableElement;
        new (): HTMLMiDataTableElement;
    };
    interface HTMLMiDropdownElement extends Components.MiDropdown, HTMLStencilElement {
    }
    var HTMLMiDropdownElement: {
        prototype: HTMLMiDropdownElement;
        new (): HTMLMiDropdownElement;
    };
    interface HTMLMiDropdownItemElement extends Components.MiDropdownItem, HTMLStencilElement {
    }
    var HTMLMiDropdownItemElement: {
        prototype: HTMLMiDropdownItemElement;
        new (): HTMLMiDropdownItemElement;
    };
    interface HTMLMiKeyboardElement extends Components.MiKeyboard, HTMLStencilElement {
    }
    var HTMLMiKeyboardElement: {
        prototype: HTMLMiKeyboardElement;
        new (): HTMLMiKeyboardElement;
    };
    interface HTMLMiListElement extends Components.MiList, HTMLStencilElement {
    }
    var HTMLMiListElement: {
        prototype: HTMLMiListElement;
        new (): HTMLMiListElement;
    };
    interface HTMLMiListItemCategoryElement extends Components.MiListItemCategory, HTMLStencilElement {
    }
    var HTMLMiListItemCategoryElement: {
        prototype: HTMLMiListItemCategoryElement;
        new (): HTMLMiListItemCategoryElement;
    };
    interface HTMLMiListItemLocationElement extends Components.MiListItemLocation, HTMLStencilElement {
    }
    var HTMLMiListItemLocationElement: {
        prototype: HTMLMiListItemLocationElement;
        new (): HTMLMiListItemLocationElement;
    };
    interface HTMLMiLocationInfoElement extends Components.MiLocationInfo, HTMLStencilElement {
    }
    var HTMLMiLocationInfoElement: {
        prototype: HTMLMiLocationInfoElement;
        new (): HTMLMiLocationInfoElement;
    };
    interface HTMLMiMapElement extends Components.MiMap, HTMLStencilElement {
    }
    var HTMLMiMapElement: {
        prototype: HTMLMiMapElement;
        new (): HTMLMiMapElement;
    };
    interface HTMLMiMetricCardElement extends Components.MiMetricCard, HTMLStencilElement {
    }
    var HTMLMiMetricCardElement: {
        prototype: HTMLMiMetricCardElement;
        new (): HTMLMiMetricCardElement;
    };
    interface HTMLMiNotificationElement extends Components.MiNotification, HTMLStencilElement {
    }
    var HTMLMiNotificationElement: {
        prototype: HTMLMiNotificationElement;
        new (): HTMLMiNotificationElement;
    };
    interface HTMLMiScrollButtonsElement extends Components.MiScrollButtons, HTMLStencilElement {
    }
    var HTMLMiScrollButtonsElement: {
        prototype: HTMLMiScrollButtonsElement;
        new (): HTMLMiScrollButtonsElement;
    };
    interface HTMLMiSearchElement extends Components.MiSearch, HTMLStencilElement {
    }
    var HTMLMiSearchElement: {
        prototype: HTMLMiSearchElement;
        new (): HTMLMiSearchElement;
    };
    interface HTMLMiShareSmsElement extends Components.MiShareSms, HTMLStencilElement {
    }
    var HTMLMiShareSmsElement: {
        prototype: HTMLMiShareSmsElement;
        new (): HTMLMiShareSmsElement;
    };
    interface HTMLMiSpinnerElement extends Components.MiSpinner, HTMLStencilElement {
    }
    var HTMLMiSpinnerElement: {
        prototype: HTMLMiSpinnerElement;
        new (): HTMLMiSpinnerElement;
    };
    interface HTMLMiStepSwitcherElement extends Components.MiStepSwitcher, HTMLStencilElement {
    }
    var HTMLMiStepSwitcherElement: {
        prototype: HTMLMiStepSwitcherElement;
        new (): HTMLMiStepSwitcherElement;
    };
    interface HTMLMiTabElement extends Components.MiTab, HTMLStencilElement {
    }
    var HTMLMiTabElement: {
        prototype: HTMLMiTabElement;
        new (): HTMLMiTabElement;
    };
    interface HTMLMiTabPanelElement extends Components.MiTabPanel, HTMLStencilElement {
    }
    var HTMLMiTabPanelElement: {
        prototype: HTMLMiTabPanelElement;
        new (): HTMLMiTabPanelElement;
    };
    interface HTMLMiTabsElement extends Components.MiTabs, HTMLStencilElement {
    }
    var HTMLMiTabsElement: {
        prototype: HTMLMiTabsElement;
        new (): HTMLMiTabsElement;
    };
    interface HTMLElementTagNameMap {
        "mi-card": HTMLMiCardElement;
        "mi-column": HTMLMiColumnElement;
        "mi-data-table": HTMLMiDataTableElement;
        "mi-dropdown": HTMLMiDropdownElement;
        "mi-dropdown-item": HTMLMiDropdownItemElement;
        "mi-keyboard": HTMLMiKeyboardElement;
        "mi-list": HTMLMiListElement;
        "mi-list-item-category": HTMLMiListItemCategoryElement;
        "mi-list-item-location": HTMLMiListItemLocationElement;
        "mi-location-info": HTMLMiLocationInfoElement;
        "mi-map": HTMLMiMapElement;
        "mi-metric-card": HTMLMiMetricCardElement;
        "mi-notification": HTMLMiNotificationElement;
        "mi-scroll-buttons": HTMLMiScrollButtonsElement;
        "mi-search": HTMLMiSearchElement;
        "mi-share-sms": HTMLMiShareSmsElement;
        "mi-spinner": HTMLMiSpinnerElement;
        "mi-step-switcher": HTMLMiStepSwitcherElement;
        "mi-tab": HTMLMiTabElement;
        "mi-tab-panel": HTMLMiTabPanelElement;
        "mi-tabs": HTMLMiTabsElement;
    }
}
declare namespace LocalJSX {
    interface MiCard {
    }
    interface MiColumn {
        "binding"?: string;
        "label"?: string;
        "sortable"?: boolean;
    }
    interface MiDataTable {
        "columns"?: Array<any>;
        "maxRows"?: number;
        "rows"?: Array<any>;
    }
    interface MiDropdown {
        /**
          * This attribute indicates that the items can be filtered using the input field present at the top. If it is not specified, the input field will not be visible, and filtering is not possible.
          * @type {boolean}
          * @memberof Dropdown
         */
        "filterable"?: boolean;
        /**
          * Gets or sets the list items.
          * @type {Array<HTMLMiDropdownItemElement>}
          * @memberof Dropdown
         */
        "items"?: Array<HTMLMiDropdownItemElement>;
        /**
          * The label will be displayed in as the text of the dropdown if the attribute multiple is pressent. *Only required if multiple is pressent.
          * @type {string}
          * @memberof Dropdown
         */
        "label": string;
        /**
          * This attribute indicates that multiple items can be selected in the list. If it is not specified, then only one item can be selected at a time.
          * @type {boolean}
          * @memberof Dropdown
         */
        "multiple"?: boolean;
        /**
          * Triggers an event when the selection is changed.
          * @type {EventEmitter}
          * @memberof Dropdown
         */
        "onChange"?: (event: CustomEvent<any>) => void;
        /**
          * Gets or sets the state of the dropdown. If the attribute is set to true then the dropdown will be expanded.
          * @type {boolean}
          * @memberof Dropdown
         */
        "open"?: boolean;
        /**
          * Gets the selected items
          * @type {Array<HTMLMiDropdownItemElement>}
          * @memberof Dropdown
         */
        "selected"?: Array<HTMLMiDropdownItemElement>;
    }
    interface MiDropdownItem {
        "selected"?: boolean;
        "text"?: string;
        "value"?: string;
    }
    interface MiKeyboard {
        /**
          * The active input element.
          * @type {HTMLInputElement}
         */
        "inputElement"?: HTMLInputElement;
        /**
          * The keyboard layout to use. Defaults to alphabetic.
          * @type {KeyboardLayout}
         */
        "layout"?: string;
    }
    interface MiList {
        /**
          * @description Determines if the MI Scroll Buttons Component should be rendered.
          * @type {boolean}
         */
        "scrollButtonsEnabled"?: boolean;
        /**
          * @description Determines how far to scroll when clicking one of the buttons from the MI Scroll Buttons Component.
          * @type {number}
         */
        "scrollLength"?: number;
    }
    interface MiListItemCategory {
        /**
          * @description Array of Categories.
          * @type {Array<Category>}
         */
        "category"?: any;
        /**
          * @description Emits the clicked category.
          * @type {EventEmitter<Category>}
         */
        "onCategoryClicked"?: (event: CustomEvent<any>) => void;
        /**
          * @description Emits a component render event.
          * @type {EventEmitter}
         */
        "onListItemDidRender"?: (event: CustomEvent<any>) => void;
        /**
          * @description List orientation. Accepts the following values: 'vertical' and 'horizontal'.
          * @type {string}
         */
        "orientation"?: string;
    }
    interface MiListItemLocation {
        /**
          * @description MI location.
         */
        "location"?: any;
        /**
          * @description Emits a component render event.
          * @type {EventEmitter}
         */
        "onListItemDidRender"?: (event: CustomEvent<any>) => void;
        /**
          * @description Emits the clicked MI Location.
          * @type {EventEmitter<Location>}
         */
        "onLocationClicked"?: (event: CustomEvent<any>) => void;
        /**
          * @description Set imperial or metric as default unit system.
          * @type {UnitSystem}
         */
        "unit"?: UnitSystem;
    }
    interface MiLocationInfo {
        /**
          * @description MI location.
         */
        "location"?: any;
    }
    interface MiMap {
        /**
          * Set to true to prevent external links on the map from opening. This can be useful when running the map on a kiosk where you never want the browser to navigate away.
         */
        "disableExternalLinks"?: boolean;
        /**
          * Set or get the current floor shown on the map.
         */
        "floor"?: string;
        /**
          * If given, will render a floor selector as a Google Map Control. Pass a string corresponding to a Google Maps Control position: https://developers.google.com/maps/documentation/javascript/controls#ControlPositioning
         */
        "floorSelector"?: google.maps.ControlPosition;
        /**
          * The Google Maps API key
         */
        "gmApiKey"?: string;
        /**
          * Google Maps options. Defaults to zoom: 17, maxZoom: 21, mapTypeControl: false, streetViewControl: false. https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions
          * @type {google.maps.MapOptions}
         */
        "gmOptions"?: google.maps.MapOptions;
        /**
          * The MapsIndoors API key
         */
        "miApiKey"?: string;
        /**
          * Emitted when the user stops dragging the map.
          * @event dragend
         */
        "onDragend"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when the map becomes idle after panning or zooming.
          * @event idle
         */
        "onIdle"?: (event: CustomEvent<any>) => void;
        /**
          * Location clicked event.
          * @event locationClicked
          * @type {object}
          * @properties Object<Location>
         */
        "onLocationClicked"?: (event: CustomEvent<any>) => void;
        /**
          * Ready event emitted when the MapsIndoors has been initialized and is ready.
          * @event ready
         */
        "onMapsIndoorsReady"?: (event: CustomEvent<any>) => void;
        /**
          * Position error event emitted if position determination fails.
          * @event positionError
          * @type {object}
         */
        "onPositionError"?: (event: CustomEvent<any>) => void;
        /**
          * Position received event emitted when the device location has been determined.
          * @event positionReceived
          * @type {object}
         */
        "onPositionReceived"?: (event: CustomEvent<any>) => void;
        /**
          * The stroke color of direction polyline on the map. Accepts any legal HTML color value. Default: '#307ad9'.
         */
        "polylineColor"?: string;
        /**
          * The stroke opacity of directions polylines on the map. Numerical value between 0.0 and 1.0. Default: 1.
         */
        "polylineOpacity"?: number;
        /**
          * The the width of the direction polyline in pixels. Default: 4.
         */
        "polylineWeight"?: number;
        "positionControl"?: google.maps.ControlPosition;
        /**
          * Set or get the current zoom level of the map.
         */
        "zoom"?: string;
    }
    interface MiMetricCard {
        /**
          * This can be used for displaying an error message if there are no data to be displayed.
          * @type {string}
          * @memberof MetricCard
         */
        "error"?: string;
        /**
          * This is the metric title.
          * @type {string}
          * @memberof MetricCard
         */
        "label"?: string;
        /**
          * When present a loading spinner will be displayed until the value or error attribute is set or the spinner attribute is removed
          * @type {boolean}
          * @memberof MetricCard
         */
        "spinner"?: boolean;
        /**
          * When present a info icon will be shown in the upper right corner of the card. When the mouse hovers over the icon tooltip will display the tip.
          * @type {string}
          * @memberof MetricCard
         */
        "tip"?: string;
        /**
          * This is the metric value.
          * @type {string}
          * @memberof MetricCard
         */
        "value"?: string;
    }
    interface MiNotification {
        /**
          * @description Time the notification should be visible.
          * @type {number} - Duration in seconds.
         */
        "duration"?: number;
        /**
          * @description Where the notifications should be positioned.
          * @type {NotificationPosition}
         */
        "position"?: NotificationPosition;
    }
    interface MiScrollButtons {
        /**
          * @description Reference to the element with scroll on parent element.
          * @type {HTMLDivElement}
         */
        "scrollContainerElementRef"?: HTMLDivElement;
        /**
          * @description Determines how far to scroll when clicking one of the buttons.
          * @type {number}
         */
        "scrollLength"?: number;
    }
    interface MiSearch {
        /**
          * Data attributes for the input field.
         */
        "dataAttributes"?: {
            [key: string]: string;
        };
        /**
          * Restrict Google Places search to a specific country (two-character, ISO 3166-1 Alpha-2 compatible country code)
         */
        "gmCountryCode"?: string;
        /**
          * If searching should include Google Places autocomplete suggestions.  Remember to comply to Google's policy by showing a "Power By Google" badge somewhere on your page if not already showing a Google map: https://developers.google.com/places/web-service/policies
         */
        "google"?: boolean;
        /**
          * Id for the input field.
         */
        "idAttribute"?: string;
        /**
          * If searching should include MapsIndoors locations.
         */
        "mapsindoors"?: boolean;
        /**
          * Search only Mapsindoors locations within given categories. Accepts comma separated list of categories, eg. 'toilet,office'
         */
        "miCategories"?: string;
        /**
          * Which fields on MapsIndoors locations to search in. Comma separated string.
         */
        "miFields"?: string;
        /**
          * Search for MapsIndoors locations near a point. Can either be lat,lng coordinate as a string, eg. '-12.3456,45.6789' or a string in the format "type:id" e.g. "venue:586ca9f1bc1f5702406442b6"
         */
        "miNear"?: string;
        /**
          * Specify Mapsindoors search ordering
         */
        "miOrder"?: string;
        /**
          * Tell Mapsindoors to skip a number of results. Combine with miTake for pagination purposes.
         */
        "miSkip"?: number;
        /**
          * Restrict how many Mapsindoors results to request.
         */
        "miTake"?: number;
        /**
          * Event emitted when the search field is emptied.
         */
        "onCleared"?: (event: CustomEvent<void>) => void;
        /**
          * Event emitted after every component rendering.
         */
        "onComponentRendered"?: (event: CustomEvent<void>) => void;
        /**
          * Event emitted when searching is complete.
         */
        "onResults"?: (event: CustomEvent<object[]>) => void;
        /**
          * Placeholder for the input field.
         */
        "placeholder"?: string;
        /**
          * Get or set the entered value
         */
        "value"?: string;
    }
    interface MiShareSms {
        /**
          * Default value for country code input field.
          * @type {string}
         */
        "countryCode"?: string;
        /**
          * MapsIndoors id for destination location.
          * @type {string}
         */
        "destinationLocationId"?: string;
        /**
          * Emits a success event when the SMS is send.
          * @type {EventEmitter}
         */
        "onSuccessfullySent"?: (event: CustomEvent<any>) => void;
        /**
          * Emits a error message when the SMS wasn't send.
          * @type {EventEmitter<string>}
         */
        "onUnsuccessfullySent"?: (event: CustomEvent<string>) => void;
        /**
          * MapsIndoors id for origin location.
          * @type {string}
         */
        "originLocationId"?: string;
        /**
          * Placeholder text for phone number input field.
          * @type {string}
         */
        "phoneNumberInputPlaceholder"?: string;
        /**
          * Label for submit button.
          * @type {string}
         */
        "submitButtonLabel"?: string;
        /**
          * MapsIndoors venue id.
          * @type {string}
         */
        "venueId"?: string;
    }
    interface MiSpinner {
        /**
          * The inverse attribute will inverse the color of the spinner.
          * @type {boolean}
          * @memberof Spinner
         */
        "inverse"?: boolean;
    }
    interface MiStepSwitcher {
        /**
          * Heading to display.
          * @type {string}
         */
        "heading"?: string;
        /**
          * Emits the new step index as a number.
          * @type {EventEmitter}
         */
        "onStepIndexChanged"?: (event: CustomEvent<number>) => void;
        /**
          * Step index to show. Defaults to first step.
          * @type {number}
         */
        "stepIndex"?: number;
        /**
          * Steps to display dots for.
          * @type {any[]}
         */
        "steps"?: any[];
    }
    interface MiTab {
        "label"?: string;
        "tabFor"?: string;
    }
    interface MiTabPanel {
    }
    interface MiTabs {
        "active"?: number;
    }
    interface IntrinsicElements {
        "mi-card": MiCard;
        "mi-column": MiColumn;
        "mi-data-table": MiDataTable;
        "mi-dropdown": MiDropdown;
        "mi-dropdown-item": MiDropdownItem;
        "mi-keyboard": MiKeyboard;
        "mi-list": MiList;
        "mi-list-item-category": MiListItemCategory;
        "mi-list-item-location": MiListItemLocation;
        "mi-location-info": MiLocationInfo;
        "mi-map": MiMap;
        "mi-metric-card": MiMetricCard;
        "mi-notification": MiNotification;
        "mi-scroll-buttons": MiScrollButtons;
        "mi-search": MiSearch;
        "mi-share-sms": MiShareSms;
        "mi-spinner": MiSpinner;
        "mi-step-switcher": MiStepSwitcher;
        "mi-tab": MiTab;
        "mi-tab-panel": MiTabPanel;
        "mi-tabs": MiTabs;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "mi-card": LocalJSX.MiCard & JSXBase.HTMLAttributes<HTMLMiCardElement>;
            "mi-column": LocalJSX.MiColumn & JSXBase.HTMLAttributes<HTMLMiColumnElement>;
            "mi-data-table": LocalJSX.MiDataTable & JSXBase.HTMLAttributes<HTMLMiDataTableElement>;
            "mi-dropdown": LocalJSX.MiDropdown & JSXBase.HTMLAttributes<HTMLMiDropdownElement>;
            "mi-dropdown-item": LocalJSX.MiDropdownItem & JSXBase.HTMLAttributes<HTMLMiDropdownItemElement>;
            "mi-keyboard": LocalJSX.MiKeyboard & JSXBase.HTMLAttributes<HTMLMiKeyboardElement>;
            "mi-list": LocalJSX.MiList & JSXBase.HTMLAttributes<HTMLMiListElement>;
            "mi-list-item-category": LocalJSX.MiListItemCategory & JSXBase.HTMLAttributes<HTMLMiListItemCategoryElement>;
            "mi-list-item-location": LocalJSX.MiListItemLocation & JSXBase.HTMLAttributes<HTMLMiListItemLocationElement>;
            "mi-location-info": LocalJSX.MiLocationInfo & JSXBase.HTMLAttributes<HTMLMiLocationInfoElement>;
            "mi-map": LocalJSX.MiMap & JSXBase.HTMLAttributes<HTMLMiMapElement>;
            "mi-metric-card": LocalJSX.MiMetricCard & JSXBase.HTMLAttributes<HTMLMiMetricCardElement>;
            "mi-notification": LocalJSX.MiNotification & JSXBase.HTMLAttributes<HTMLMiNotificationElement>;
            "mi-scroll-buttons": LocalJSX.MiScrollButtons & JSXBase.HTMLAttributes<HTMLMiScrollButtonsElement>;
            "mi-search": LocalJSX.MiSearch & JSXBase.HTMLAttributes<HTMLMiSearchElement>;
            "mi-share-sms": LocalJSX.MiShareSms & JSXBase.HTMLAttributes<HTMLMiShareSmsElement>;
            "mi-spinner": LocalJSX.MiSpinner & JSXBase.HTMLAttributes<HTMLMiSpinnerElement>;
            "mi-step-switcher": LocalJSX.MiStepSwitcher & JSXBase.HTMLAttributes<HTMLMiStepSwitcherElement>;
            "mi-tab": LocalJSX.MiTab & JSXBase.HTMLAttributes<HTMLMiTabElement>;
            "mi-tab-panel": LocalJSX.MiTabPanel & JSXBase.HTMLAttributes<HTMLMiTabPanelElement>;
            "mi-tabs": LocalJSX.MiTabs & JSXBase.HTMLAttributes<HTMLMiTabsElement>;
        }
    }
}
